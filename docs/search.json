[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SFC6006",
    "section": "",
    "text": "Bienvenue au module d’analyse de données en R du cours SFC6006 !\nL’ensemble des ressources pour les cours se trouvent sur ce site web.\n\n\nL’ensemble de ce site est sous license a Creative Commons Attribution-ShareAlike 4.0 International.\n\n\n\nUne partie du cours proposé ici est adapté du matériel proposé par Data Science in a Box.\nThis website is built with Quarto."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "SFC6006",
    "section": "",
    "text": "L’ensemble de ce site est sous license a Creative Commons Attribution-ShareAlike 4.0 International."
  },
  {
    "objectID": "index.html#acknowledements",
    "href": "index.html#acknowledements",
    "title": "SFC6006",
    "section": "",
    "text": "Une partie du cours proposé ici est adapté du matériel proposé par Data Science in a Box.\nThis website is built with Quarto."
  },
  {
    "objectID": "slides/01 - tidyverse.html#objectifs",
    "href": "slides/01 - tidyverse.html#objectifs",
    "title": "01 - Introduction",
    "section": "Objectifs",
    "text": "Objectifs\nÊtre capable de manipuler des données et de les visualiser avec R (SFC1018)\nÈtre capable de mettre en oeuvre des méthodes de traitement statistique des données avec R (SFC6008)\nÊtre capable de réaliser un projet de traitement de données de A à Z en R."
  },
  {
    "objectID": "slides/01 - tidyverse.html#méthode",
    "href": "slides/01 - tidyverse.html#méthode",
    "title": "01 - Introduction",
    "section": "Méthode",
    "text": "Méthode\n\n(Wickham et al., 2023)"
  },
  {
    "objectID": "slides/01 - tidyverse.html#ressources",
    "href": "slides/01 - tidyverse.html#ressources",
    "title": "01 - Introduction",
    "section": "Ressources",
    "text": "Ressources\n\n\n\n(Wickham et al., 2023)\n\n\n(Kuhn and Silge, 2022)"
  },
  {
    "objectID": "slides/01 - tidyverse.html#bibliography",
    "href": "slides/01 - tidyverse.html#bibliography",
    "title": "01 - Introduction",
    "section": "Bibliography",
    "text": "Bibliography\n\n\nKuhn, M. and Silge, J. (2022). Tidy modeling with R: A framework for modeling in the tidyverse. O’Reilly Media.\n\n\nWickham, H. and Bryan, J. (2023). R Packages: Organize, Test, Document, and Share Your Code (2nd edition). O’Reilly Media.\n\n\nWickham, H., Çetinkaya-Rundel, M. and Grolemund, G. (2023). R for Data Science (2nd ed.). O’Reilly Media, Inc.\n\n\n\n\n\n\nSFC6006 | Tim Bollé"
  },
  {
    "objectID": "slides/01 - tidyverse.html#les-outils",
    "href": "slides/01 - tidyverse.html#les-outils",
    "title": "01 - Introduction",
    "section": "Les outils",
    "text": "Les outils\n\nDéveloppement:\n\nR\nRStudio\ntidyverse\ntidymodels\nR Markdown\n\n\n\nGestion et collaboration:\n\nGit\nGitHub"
  },
  {
    "objectID": "slides/01 - tidyverse.html#objectifs-1",
    "href": "slides/01 - tidyverse.html#objectifs-1",
    "title": "01 - Introduction",
    "section": "Objectifs",
    "text": "Objectifs\n\n\nAnalyser des données\nAnalyser des données de manière répétable\nAnalyser des données de manière répétable, avec des outils de programmation modernes\nAnalyser des données de manière répétable et collaborative, avec des outils de programmation modernes"
  },
  {
    "objectID": "slides/01 - tidyverse.html#répétabilité",
    "href": "slides/01 - tidyverse.html#répétabilité",
    "title": "01 - Introduction",
    "section": "Répétabilité",
    "text": "Répétabilité\n\nQue signifie conduire une analyse de donnée de manière répétable ?\n\nÀ court-terme:\n\nPouvons nous reproduire les tableaux et les figures à partir des données\nEst-ce que le code fait ce que nous voulons ?\nPouvons-nous reconstruire pourquoi et comment nous avons obtenus les résultats\n\nÀ long-terme:\n\nPeut-on réutiliser le code pour d’autres données ?\nPeut-on réutiliser le code pour faire autre chose ?"
  },
  {
    "objectID": "slides/01 - tidyverse.html#les-outils-de-la-répérabilité",
    "href": "slides/01 - tidyverse.html#les-outils-de-la-répérabilité",
    "title": "01 - Introduction",
    "section": "Les outils de la répérabilité",
    "text": "Les outils de la répérabilité\nScriptability \\(\\rightarrow\\) R\nDocumentation et communication \\(\\rightarrow\\) R Markdown\nGestion et collaboration \\(\\rightarrow\\) Git/GitHub"
  },
  {
    "objectID": "slides/01 - tidyverse.html#r-et-rstudio",
    "href": "slides/01 - tidyverse.html#r-et-rstudio",
    "title": "01 - Introduction",
    "section": "R et RStudio",
    "text": "R et RStudio\n\n\n\n\nR est un language de programmation open-source\nR est un environnement pour faire des calculs statistiques et de la visualisation\nDe nombreuses autres applications sont disponibles grâce à des packages\n\n\n\n\nRStudio est un IDE (Environnement de Développement Intégré)\nC’est une interface pour R\nPas nécessaire pour coder en R mais tellement pratique !"
  },
  {
    "objectID": "slides/01 - tidyverse.html#rstudio-tour",
    "href": "slides/01 - tidyverse.html#rstudio-tour",
    "title": "01 - Introduction",
    "section": "RStudio tour",
    "text": "RStudio tour"
  },
  {
    "objectID": "slides/01 - tidyverse.html#r-packages",
    "href": "slides/01 - tidyverse.html#r-packages",
    "title": "01 - Introduction",
    "section": "R packages",
    "text": "R packages\nLes packages sont les building blocks de la reproductibilité. Ils contiennent de nombreuses fonctions réutilisables, de la documentation et données de test (Wickham and Bryan, 2023)\nNous allons en utiliser quelques une mais vous verrez que c’est tout une philosophie !"
  },
  {
    "objectID": "slides/01 - tidyverse.html#tidyverse",
    "href": "slides/01 - tidyverse.html#tidyverse",
    "title": "01 - Introduction",
    "section": "Tidyverse",
    "text": "Tidyverse\n\n\n\n\ntidyverse.org\nLe Tidyverse est une collection de packages développés pour faire de la data science\nIl y a une philophie et une grammaire commune à tous ces packages, que nous allons apprendre."
  },
  {
    "objectID": "slides/01 - tidyverse.html#tidymodels",
    "href": "slides/01 - tidyverse.html#tidymodels",
    "title": "01 - Introduction",
    "section": "Tidymodels",
    "text": "Tidymodels\n\n\n\n\ntidymodels.org\nTidymodels est une collection de packages pour créer de modèles de machine learning, en gardant la logique du Tidyverse."
  },
  {
    "objectID": "slides/01 - tidyverse.html#r-markdown",
    "href": "slides/01 - tidyverse.html#r-markdown",
    "title": "01 - Introduction",
    "section": "R Markdown",
    "text": "R Markdown\n\n\nrmarkdown.rstudio.com\nR Markdown permet d’écrire des documents avec du code intégré (extension en .Rmd).\nVa permettre de documenter et de communiquer directement nos analyses de données !\n\n\nReproductible: À chaque fois qu’on génère le document, tout est exécuté depuis le début\nSyntaxe simple pour avoir des documents de qualité\nLe document se découpe en zones de texte et blocks de code"
  },
  {
    "objectID": "slides/01 - tidyverse.html#r-markdown-1",
    "href": "slides/01 - tidyverse.html#r-markdown-1",
    "title": "01 - Introduction",
    "section": "R Markdown",
    "text": "R Markdown"
  },
  {
    "objectID": "slides/01 - tidyverse.html#r-markdown---aide",
    "href": "slides/01 - tidyverse.html#r-markdown---aide",
    "title": "01 - Introduction",
    "section": "R Markdown - Aide",
    "text": "R Markdown - Aide\n\n\nCheatsheetHelp &gt; Cheatsheet\n\n\nMarkdown Quick ReferenceHelp &gt; Markdown Quick Reference"
  },
  {
    "objectID": "slides/01 - tidyverse.html#les-outils-1",
    "href": "slides/01 - tidyverse.html#les-outils-1",
    "title": "01 - Introduction",
    "section": "Les outils",
    "text": "Les outils\n\nDéveloppement:\n\nR\nRStudio\ntidyverse\nR Markdown\n\n\n\nGestion et collaboration:\n\nGit\nGitHub"
  },
  {
    "objectID": "slides/01 - tidyverse.html#git-et-github",
    "href": "slides/01 - tidyverse.html#git-et-github",
    "title": "01 - Introduction",
    "section": "Git et GitHub",
    "text": "Git et GitHub\n\n\n\n\n\n\n\n\nGit est un outil de gestion de version\n\nComme le track changes sur Word\n\nTrès populaire dans le monde de la programmation\n\n\n\n\n\n\n\n\nGitHub est un plateforme de stockage de repo Git\n\nComme un Onedrive/Dropbox pour Git\n\nNous allons essayer de l’utiliser pour… tout !"
  },
  {
    "objectID": "slides/01 - tidyverse.html#pourquoi-la-gestion-de-version",
    "href": "slides/01 - tidyverse.html#pourquoi-la-gestion-de-version",
    "title": "01 - Introduction",
    "section": "Pourquoi la gestion de version ?",
    "text": "Pourquoi la gestion de version ?\n\nPhD Comics"
  },
  {
    "objectID": "slides/01 - tidyverse.html#fonctionnement",
    "href": "slides/01 - tidyverse.html#fonctionnement",
    "title": "01 - Introduction",
    "section": "Fonctionnement",
    "text": "Fonctionnement"
  },
  {
    "objectID": "slides/01 - tidyverse.html#mise-en-place",
    "href": "slides/01 - tidyverse.html#mise-en-place",
    "title": "01 - Introduction",
    "section": "Mise en place",
    "text": "Mise en place\nGit peut être utilisé depuis le terminal de commande\n\nUtilisation plus avancée\nNous pouvons normalement tout faire depuis R Studio\n\nGithub:\n\nCréez un compte avec votre adresse UQTR\nVérifiez votre adresse courriel"
  },
  {
    "objectID": "labs/Semaine1.html",
    "href": "labs/Semaine1.html",
    "title": "Semaine 1 - Data wrangling",
    "section": "",
    "text": "En janvier 2017, Buzzfeed a publié un article sur pourquoi les lauréats du prix Nobel montrent que l’immigration est si importante pour la science américaine.\nVous pouvez lire l’article ici. Dans l’article, ils montrent que bien que la plupart des lauréats vivants du prix Nobel en sciences soient basés aux États-Unis, beaucoup d’entre eux sont nés dans d’autres pays. C’est une des raisons pour lesquelles le monde scientifique dit que l’immigration est vitale pour le progrès. Dans ce lab, nous travaillerons avec les données de cet article pour recréer certaines de leurs visualisations ainsi qu’explorer de nouvelles questions."
  },
  {
    "objectID": "labs/Semaine1.html#échauffement",
    "href": "labs/Semaine1.html#échauffement",
    "title": "Semaine 1 - Data wrangling",
    "section": "Échauffement",
    "text": "Échauffement\nAvant d’introduire les données, commençons par quelques exercices simples.\n\nMettez à jour le YAML, en changeant le nom de l’auteur par le vôtre, et knit le document.\nCommittez vos modifications avec un message de commit. Assurez vous que les fichiers .Rmd et .md sont bien ajoutés au commit.\nPushez vos modifications sur GitHub.\nAllez dans votre dépôt sur GitHub et confirmez que vos modifications sont visibles dans vos fichiers Rmd et md."
  },
  {
    "objectID": "labs/Semaine1.html#packages",
    "href": "labs/Semaine1.html#packages",
    "title": "Semaine 1 - Data wrangling",
    "section": "Packages",
    "text": "Packages\nNous utiliserons le package tidyverse pour une grande partie de la manipulation des données.\n\nlibrary(tidyverse)\n\nS’il n’est pas déjà installé, vous pouvez le faire avec la commande install.packages(\"tidyverse\"). Cette commande n’est nécaisse qu’une seule fois."
  },
  {
    "objectID": "labs/Semaine1.html#données",
    "href": "labs/Semaine1.html#données",
    "title": "Semaine 1 - Data wrangling",
    "section": "Données",
    "text": "Données\nLe jeu de données pour cet exercice se trouve sous forme de fichier CSV (valeurs séparées par des virgules) dans le dossier data de votre dépôt. Vous pouvez les charger avec la fonction read_csv:\nLes descriptions des variables sont les suivantes :\n\nid: Numéro d’identification\nfirstname: Prénom du lauréat\nsurname: Nom de famille\nyear: Année de remise du prix\ncategory: Catégorie du prix\naffiliation: Affiliation du lauréat\ncity: Ville du lauréat l’année du prix\ncountry: Pays du lauréat l’année du prix\nborn_date: Date de naissance du lauréat\ndied_date: Date de décès du lauréat\ngender: Sexe du lauréat\nborn_city: Ville de naissance du lauréat\nborn_country: Pays de naissance du lauréat\nborn_country_code: Code du pays de naissance du lauréat\ndied_city: Ville de décès du lauréat\ndied_country: Pays de décès du lauréat\ndied_country_code: Code du pays de décès du lauréat\noverall_motivation: Motivation générale pour la reconnaissance\nshare: Nombre d’autres lauréats avec lesquels le prix est partagé\nmotivation: Motivation pour la reconnaissance\n\nDans quelques cas, le nom de la ville/pays a changé après la réception du prix par le lauréat (par exemple, en 1975, la Bosnie-Herzégovine s’appelait la République fédérative socialiste de Yougoslavie). Dans ces cas, les variables ci-dessous reflètent un nom différent de leurs homologues sans le suffixe `_original`.\n\nborn_country_original\nborn_city_original\ndied_country_original\ndied_city_original\ncity_original\ncountry_original"
  },
  {
    "objectID": "labs/Semaine1.html#la-plupart-des-lauréats-vivants-du-prix-nobel-étaient-basés-aux-états-unis-lorsquils-ont-remporté-leurs-prix",
    "href": "labs/Semaine1.html#la-plupart-des-lauréats-vivants-du-prix-nobel-étaient-basés-aux-états-unis-lorsquils-ont-remporté-leurs-prix",
    "title": "Semaine1",
    "section": "“La plupart des lauréats vivants du prix Nobel étaient basés aux États-Unis lorsqu’ils ont remporté leurs prix”",
    "text": "“La plupart des lauréats vivants du prix Nobel étaient basés aux États-Unis lorsqu’ils ont remporté leurs prix”\n… dit l’article de Buzzfeed. Voyons si c’est vrai.\nTout d’abord, nous allons créer une nouvelle variable pour identifier si le lauréat vivait aux États-Unis lorsqu’il a remporté son prix. Pour cela, nous utiliserons la fonction mutate(). Créez une nouvelle colonne country_us qui sera égale à \"USA\" si le country est égal à “USA” et à \"Other\" sinon. Pour cela, pensez à utiliser la fonction if_else dans votre mutate.\nNous voudrons ensuite transformer cette colonne en facteur, ce qui est toujours utile lorsqu’on travaille avec des données catégoriques. Pour cela, vous pouvez utiliser la fonction fct_relvel() en précisant la colonne à mettre en facteur et le nom des niveaux (ici “USA” en premier et “Other” en deuxième).\n\nExercice 3\nPour la suite de l’exercice, nous limiterons notre analyse aux catégories suivantes : Physique, Médecine, Chimie et Économie.\nCréez un nouveau data frame appelé nobel_living_science qui filtre pour les catégories suivantes : Physique, Médecine, Chimie et Économie.\nPour cela, vous pouvez tester si category est dans le vecteur c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"). Profitez-en également pour transformer cette colonne en facteurs également, en les ordonant par ordre alphabétique.\n\n\nExercice 4\nPour le prochain exercice, travaillez avec le data frame nobel_living_science que nous avons créé ci-dessus.\nCréez un graphique à barres avec des facets visualisant la relation entre la catégorie du prix Nobel et si le lauréat était aux États-Unis lorsqu’il l’a remporté.\nPour rappel, les graphiques peuvent être créés de la forme:\n\nnobel_living_science %&gt;%\n  ggplot(aes(...)) +\n    geom_XXX(...)\n\nPar exemple,\n\nnobel_living_science %&gt;%\n  ggplot(aes(x=country_us, fill = country_us)) +\n  geom_bar() +\n   labs(x = \"Pays de résidence\",                 # On met à jour les labels\n       y = \"Nombre de lauréats\",\n       title = \"Pays de résidence des lauréats vivants du prix Nobel\",\n       subtitle = \"Selon si le pays de résidence correspond aux USA ou non\",\n       fill = \"Pays du lauréat\")\n\n\n\n\n\n\n\n\nPour créer des facettes selon les catégories, vous pouvez ajouter la fonction facet_wrap. Votre visualisation doit avoir:\n\nVotre visualisation doit être facettée par catégorie.\nPour chaque facette, vous devez avoir deux barres, une pour les gagnants aux États-Unis et une pour les autres.\nInversez les coordonnées pour que les barres soient horizontales, pas verticales.\n\n\n\n\n\n\n\n\n\n\nInterprétez votre visualisation et commentez le titre de Buzzfeed en regardant s’il est soutenu par les données.\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit."
  },
  {
    "objectID": "labs/Semaine1.html#mais-parmi-ces-lauréats-du-prix-nobel-basés-aux-états-unis-beaucoup-sont-nés-dans-dautres-pays",
    "href": "labs/Semaine1.html#mais-parmi-ces-lauréats-du-prix-nobel-basés-aux-états-unis-beaucoup-sont-nés-dans-dautres-pays",
    "title": "Semaine1",
    "section": "“Mais parmi ces lauréats du prix Nobel basés aux États-Unis, beaucoup sont nés dans d’autres pays”",
    "text": "“Mais parmi ces lauréats du prix Nobel basés aux États-Unis, beaucoup sont nés dans d’autres pays”\n\nExercice 5\nCréez une nouvelle variable appelée born_country_us qui a la valeur \"USA\" si le lauréat est né aux États-Unis, et \"Other\" sinon. Combien de gagnants sont nés aux États-Unis ?\n\n\nExercice 6\nAjoutez une deuxième variable à votre visualisation de l’exercice 4 basée sur si le lauréat est né aux États-Unis ou non. D’après votre visualisation, les données semblent-elles soutenir l’affirmation de Buzzfeed ? Expliquez votre raisonnement en 1-2 phrases.\n\nVotre visualisation finale doit contenir une facette pour chaque catégorie.\nDans chaque facette, il doit y avoir une barre pour savoir si le lauréat a remporté le prix aux États-Unis ou non.\nChaque barre doit avoir des segments pour savoir si le lauréat est né aux États-Unis ou non.\n\n\n\n\n\n\n\n\n\n\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit."
  },
  {
    "objectID": "labs/Semaine1.html#doù-viennent-les-lauréats-nés-à-létranger-qui-ont-remporté-leur-prix-aux-états-unis",
    "href": "labs/Semaine1.html#doù-viennent-les-lauréats-nés-à-létranger-qui-ont-remporté-leur-prix-aux-états-unis",
    "title": "Semaine1",
    "section": "D’où viennent les lauréats nés à l’étranger qui ont remporté leur prix aux États-Unis ?",
    "text": "D’où viennent les lauréats nés à l’étranger qui ont remporté leur prix aux États-Unis ?\n\nExercice 7\nDans un seul pipeline, filtrez pour les lauréats qui ont remporté leur prix aux États-Unis, mais qui sont nés en dehors des États-Unis, puis créez un tableau de fréquence (avec la fonction count()) pour leur pays de naissance (born_country) et arrangez le data frame résultant par ordre décroissant du nombre d’observations pour chaque pays. Quel pays est le plus commun ?\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\nMaintenant, relisez votre rapport pour vous assurer que vous avez répondu à toutes les questions et que tous vos blocs de code R sont correctement étiquetés."
  },
  {
    "objectID": "slides/00 - Intro.html",
    "href": "slides/00 - Intro.html",
    "title": "01 - Introduction",
    "section": "",
    "text": "Être capable de manipuler des données et de les visualiser avec R (SFC1018)\nÈtre capable de mettre en oeuvre des méthodes de traitement statistique des données avec R (SFC6008)\nÊtre capable de réaliser un projet de traitement de données de A à Z en R.\n\n\n\n\n\n\n(Wickham et al., 2023)\n\n\n\n\n\n\n\n\n(Wickham et al., 2023)\n\n\n(Kuhn and Silge, 2022)"
  },
  {
    "objectID": "slides/00 - Intro.html#objectifs",
    "href": "slides/00 - Intro.html#objectifs",
    "title": "01 - Introduction",
    "section": "Objectifs",
    "text": "Objectifs\nÊtre capable de manipuler des données et de les visualiser avec R (SFC1018)\nÈtre capable de mettre en oeuvre des méthodes de traitement statistique des données avec R (SFC6008)\nÊtre capable de réaliser un projet de traitement de données de A à Z en R."
  },
  {
    "objectID": "slides/00 - Intro.html#méthode",
    "href": "slides/00 - Intro.html#méthode",
    "title": "01 - Introduction",
    "section": "Méthode",
    "text": "Méthode\n\n(Wickham et al., 2023)"
  },
  {
    "objectID": "slides/00 - Intro.html#ressources",
    "href": "slides/00 - Intro.html#ressources",
    "title": "01 - Introduction",
    "section": "Ressources",
    "text": "Ressources\n\n\n\n(Wickham et al., 2023)\n\n\n(Kuhn and Silge, 2022)"
  },
  {
    "objectID": "slides/00 - Intro.html#les-outils",
    "href": "slides/00 - Intro.html#les-outils",
    "title": "01 - Introduction",
    "section": "Les outils",
    "text": "Les outils\n\nDéveloppement:\n\nR\nRStudio\ntidyverse\ntidymodels\nR Markdown\n\n\n\nGestion et collaboration:\n\nGit\nGitHub"
  },
  {
    "objectID": "slides/00 - Intro.html#objectifs-1",
    "href": "slides/00 - Intro.html#objectifs-1",
    "title": "01 - Introduction",
    "section": "Objectifs",
    "text": "Objectifs\n\n\nAnalyser des données\nAnalyser des données de manière répétable\nAnalyser des données de manière répétable, avec des outils de programmation modernes\nAnalyser des données de manière répétable et collaborative, avec des outils de programmation modernes"
  },
  {
    "objectID": "slides/00 - Intro.html#répétabilité",
    "href": "slides/00 - Intro.html#répétabilité",
    "title": "01 - Introduction",
    "section": "Répétabilité",
    "text": "Répétabilité\n\nQue signifie conduire une analyse de donnée de manière répétable ?\n\nÀ court-terme:\n\nPouvons nous reproduire les tableaux et les figures à partir des données\nEst-ce que le code fait ce que nous voulons ?\nPouvons-nous reconstruire pourquoi et comment nous avons obtenus les résultats\n\nÀ long-terme:\n\nPeut-on réutiliser le code pour d’autres données ?\nPeut-on réutiliser le code pour faire autre chose ?"
  },
  {
    "objectID": "slides/00 - Intro.html#les-outils-de-la-répérabilité",
    "href": "slides/00 - Intro.html#les-outils-de-la-répérabilité",
    "title": "01 - Introduction",
    "section": "Les outils de la répérabilité",
    "text": "Les outils de la répérabilité\nScriptability \\(\\rightarrow\\) R\nDocumentation et communication \\(\\rightarrow\\) R Markdown\nGestion et collaboration \\(\\rightarrow\\) Git/GitHub"
  },
  {
    "objectID": "slides/00 - Intro.html#r-et-rstudio",
    "href": "slides/00 - Intro.html#r-et-rstudio",
    "title": "01 - Introduction",
    "section": "R et RStudio",
    "text": "R et RStudio\n\n\n\n\nR est un language de programmation open-source\nR est un environnement pour faire des calculs statistiques et de la visualisation\nDe nombreuses autres applications sont disponibles grâce à des packages\n\n\n\n\nRStudio est un IDE (Environnement de Développement Intégré)\nC’est une interface pour R\nPas nécessaire pour coder en R mais tellement pratique !"
  },
  {
    "objectID": "slides/00 - Intro.html#rstudio-tour",
    "href": "slides/00 - Intro.html#rstudio-tour",
    "title": "01 - Introduction",
    "section": "RStudio tour",
    "text": "RStudio tour"
  },
  {
    "objectID": "slides/00 - Intro.html#r-packages",
    "href": "slides/00 - Intro.html#r-packages",
    "title": "01 - Introduction",
    "section": "R packages",
    "text": "R packages\nLes packages sont les building blocks de la reproductibilité. Ils contiennent de nombreuses fonctions réutilisables, de la documentation et données de test (Wickham and Bryan, 2023)\nNous allons en utiliser quelques une mais vous verrez que c’est tout une philosophie !"
  },
  {
    "objectID": "slides/00 - Intro.html#tidyverse",
    "href": "slides/00 - Intro.html#tidyverse",
    "title": "01 - Introduction",
    "section": "Tidyverse",
    "text": "Tidyverse\n\n\n\n\ntidyverse.org\nLe Tidyverse est une collection de packages développés pour faire de la data science\nIl y a une philophie et une grammaire commune à tous ces packages, que nous allons apprendre."
  },
  {
    "objectID": "slides/00 - Intro.html#tidymodels",
    "href": "slides/00 - Intro.html#tidymodels",
    "title": "01 - Introduction",
    "section": "Tidymodels",
    "text": "Tidymodels\n\n\n\n\ntidymodels.org\nTidymodels est une collection de packages pour créer de modèles de machine learning, en gardant la logique du Tidyverse."
  },
  {
    "objectID": "slides/00 - Intro.html#r-markdown",
    "href": "slides/00 - Intro.html#r-markdown",
    "title": "01 - Introduction",
    "section": "R Markdown",
    "text": "R Markdown\n\n\nrmarkdown.rstudio.com\nR Markdown permet d’écrire des documents avec du code intégré (extension en .Rmd).\nVa permettre de documenter et de communiquer directement nos analyses de données !\n\n\nReproductible: À chaque fois qu’on génère le document, tout est exécuté depuis le début\nSyntaxe simple pour avoir des documents de qualité\nLe document se découpe en zones de texte et blocks de code"
  },
  {
    "objectID": "slides/00 - Intro.html#r-markdown-1",
    "href": "slides/00 - Intro.html#r-markdown-1",
    "title": "01 - Introduction",
    "section": "R Markdown",
    "text": "R Markdown"
  },
  {
    "objectID": "slides/00 - Intro.html#r-markdown---aide",
    "href": "slides/00 - Intro.html#r-markdown---aide",
    "title": "01 - Introduction",
    "section": "R Markdown - Aide",
    "text": "R Markdown - Aide\n\n\nCheatsheetHelp &gt; Cheatsheet\n\n\nMarkdown Quick ReferenceHelp &gt; Markdown Quick Reference"
  },
  {
    "objectID": "slides/00 - Intro.html#les-outils-1",
    "href": "slides/00 - Intro.html#les-outils-1",
    "title": "01 - Introduction",
    "section": "Les outils",
    "text": "Les outils\n\nDéveloppement:\n\nR\nRStudio\ntidyverse\nR Markdown\n\n\n\nGestion et collaboration:\n\nGit\nGitHub"
  },
  {
    "objectID": "slides/00 - Intro.html#git-et-github",
    "href": "slides/00 - Intro.html#git-et-github",
    "title": "01 - Introduction",
    "section": "Git et GitHub",
    "text": "Git et GitHub\n\n\n\n\n\n\n\n\nGit est un outil de gestion de version\n\nComme le track changes sur Word\n\nTrès populaire dans le monde de la programmation\n\n\n\n\n\n\n\n\nGitHub est un plateforme de stockage de repo Git\n\nComme un Onedrive/Dropbox pour Git\n\nNous allons essayer de l’utiliser pour… tout !"
  },
  {
    "objectID": "slides/00 - Intro.html#pourquoi-la-gestion-de-version",
    "href": "slides/00 - Intro.html#pourquoi-la-gestion-de-version",
    "title": "01 - Introduction",
    "section": "Pourquoi la gestion de version ?",
    "text": "Pourquoi la gestion de version ?\n\nPhD Comics"
  },
  {
    "objectID": "slides/00 - Intro.html#fonctionnement",
    "href": "slides/00 - Intro.html#fonctionnement",
    "title": "01 - Introduction",
    "section": "Fonctionnement",
    "text": "Fonctionnement"
  },
  {
    "objectID": "slides/00 - Intro.html#mise-en-place",
    "href": "slides/00 - Intro.html#mise-en-place",
    "title": "01 - Introduction",
    "section": "Mise en place",
    "text": "Mise en place\nGit peut être utilisé depuis le terminal de commande\n\nUtilisation plus avancée\nNous pouvons normalement tout faire depuis R Studio\n\nGithub:\n\nCréez un compte avec votre adresse UQTR\nVérifiez votre adresse courriel"
  },
  {
    "objectID": "slides/00 - Intro.html#bibliographie",
    "href": "slides/00 - Intro.html#bibliographie",
    "title": "01 - Introduction",
    "section": "Bibliographie",
    "text": "Bibliographie\n\n\nKuhn, M. and Silge, J. (2022). Tidy modeling with R: A framework for modeling in the tidyverse. O’Reilly Media.\n\n\nWickham, H. and Bryan, J. (2023). R Packages: Organize, Test, Document, and Share Your Code (2nd edition). O’Reilly Media.\n\n\nWickham, H., Çetinkaya-Rundel, M. and Grolemund, G. (2023). R for Data Science (2nd ed.). O’Reilly Media, Inc.\n\n\n\n\n\n\nSFC6006 | Tim Bollé"
  },
  {
    "objectID": "labs/Semaine1.html#exploration-de-données",
    "href": "labs/Semaine1.html#exploration-de-données",
    "title": "Semaine1",
    "section": "Exploration de données",
    "text": "Exploration de données\nCombien d’observations et combien de variables y a-t-il dans le jeu de données ? Que représente chaque ligne ?"
  },
  {
    "objectID": "labs/Semaine1.html#sélection-de-données",
    "href": "labs/Semaine1.html#sélection-de-données",
    "title": "Semaine1",
    "section": "Sélection de données",
    "text": "Sélection de données\nIl y a quelques observations dans ce jeu de données que nous exclurons de notre analyse pour correspondre aux résultats de Buzzfeed.\nPour rappel, les différents verbes du tidyverse permettent de manipuler les données:\n\nselect: Sélectionner une colonne\narrange: Ordonner les lignes\nslice: Sélectionner des lignes (par les index)\nfilter: Sélectionner des lignes selon des critères\ndistinct: Filtrer les lignes uniques\nmutate: Ajout de nouvelles variables\nsummarise: Réduire variables en valeurs\ngroup_by: Regrouper des observations selon une variable\n\nCountez le nombre de valeur NA pour la colonne. Pour cela, vous pouvez utiliser les fonctions filter, is.na et count.\nQuelles sont les valeurs possibles pour la variable gender ? La valeur org signifie qu’une organisation a gagné le prix Nobel.\nNous allons maintenant vouloir sélectionner seulement les entrées qui ont toutes les valeur nécessaire, c’est-à-dire des personnes vivantes dont on connait le pays d’origine.\nCréez un nouveau data frame appelé nobel_living qui filtre pour\n\nles lauréats pour lesquels country est disponible\nles lauréats qui sont des personnes par opposition aux organisations (les organisations sont désignées par org dans la variable gender)\nles lauréats vivant, c’est-à-dire les entrées dont la died_date est NA\n\nVérifiez que vous obtenez bien un data frame avec 228 observations après avoir filtré les données.\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit."
  },
  {
    "objectID": "labs/Semaine1.html#analyse-de-données",
    "href": "labs/Semaine1.html#analyse-de-données",
    "title": "Semaine1",
    "section": "Analyse de données",
    "text": "Analyse de données\n\n“La plupart des lauréats vivants du prix Nobel étaient basés aux États-Unis lorsqu’ils ont remporté leurs prix”\n… dit l’article de Buzzfeed. Voyons si c’est vrai.\nTout d’abord, nous allons créer une nouvelle variable pour identifier si le lauréat vivait aux États-Unis lorsqu’il a remporté son prix. Pour cela, nous utiliserons la fonction mutate(). Créez une nouvelle colonne country_us qui sera égale à \"USA\" si le country est égal à “USA” et à \"Other\" sinon. Pour cela, pensez à utiliser la fonction if_else dans votre mutate.\nNous voudrons ensuite transformer cette colonne en facteur, ce qui est toujours utile lorsqu’on travaille avec des données catégoriques. Pour cela, vous pouvez utiliser la fonction fct_relvel() en précisant la colonne à mettre en facteur et le nom des niveaux (ici “USA” en premier et “Other” en deuxième).\nPour la suite de l’exercice, nous limiterons notre analyse aux catégories suivantes : Physique, Médecine, Chimie et Économie.\nCréez un nouveau data frame appelé nobel_living_science qui filtre pour les catégories suivantes : Physique, Médecine, Chimie et Économie.\nPour cela, vous pouvez tester si category est dans le vecteur c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"). Profitez-en également pour transformer cette colonne en facteurs également, en les ordonant par ordre alphabétique.\nPour le prochain exercice, travaillez avec le data frame nobel_living_science que nous avons créé ci-dessus.\nCréez un graphique à barres avec des facets visualisant la relation entre la catégorie du prix Nobel et si le lauréat était aux États-Unis lorsqu’il l’a remporté.\nPour rappel, les graphiques peuvent être créés de la forme:\n\nnobel_living_science %&gt;%\n  ggplot(aes(...)) +\n    geom_XXX(...)\n\nPar exemple,\n\nnobel_living_science %&gt;%\n  ggplot(aes(x=country_us, fill = country_us)) +\n  geom_bar() +\n   labs(x = \"Pays de résidence\",                 # On met à jour les labels\n       y = \"Nombre de lauréats\",\n       title = \"Pays de résidence des lauréats vivants du prix Nobel\",\n       subtitle = \"Selon si le pays de résidence correspond aux USA ou non\",\n       fill = \"Pays du lauréat\")\n\n\n\n\n\n\n\n\nPour créer des facettes selon les catégories, vous pouvez ajouter la fonction facet_wrap. Votre visualisation doit avoir:\n\nVotre visualisation doit être facettée par catégorie.\nPour chaque facette, vous devez avoir deux barres, une pour les gagnants aux États-Unis et une pour les autres.\nInversez les coordonnées pour que les barres soient horizontales, pas verticales.\n\n\n\n\n\n\n\n\n\n\nInterprétez votre visualisation et commentez le titre de Buzzfeed en regardant s’il est soutenu par les données.\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\n\n\n“Mais parmi ces lauréats du prix Nobel basés aux États-Unis, beaucoup sont nés dans d’autres pays”\nCréez une nouvelle variable appelée born_country_us qui a la valeur \"USA\" si le lauréat est né aux États-Unis, et \"Other\" sinon. Combien de gagnants sont nés aux États-Unis ?\nAjoutez une deuxième variable à votre visualisation de l’exercice 4 basée sur si le lauréat est né aux États-Unis ou non. D’après votre visualisation, les données semblent-elles soutenir l’affirmation de Buzzfeed ? Expliquez votre raisonnement en 1-2 phrases.\n\nVotre visualisation finale doit contenir une facette pour chaque catégorie.\nDans chaque facette, il doit y avoir une barre pour savoir si le lauréat a remporté le prix aux États-Unis ou non.\nChaque barre doit avoir des segments pour savoir si le lauréat est né aux États-Unis ou non.\n\n\n\n\n\n\n\n\n\n\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\n\n\nD’où viennent les lauréats nés à l’étranger qui ont remporté leur prix aux États-Unis ?\nDans un seul pipeline, filtrez pour les lauréats qui ont remporté leur prix aux États-Unis, mais qui sont nés en dehors des États-Unis, puis créez un tableau de fréquence (avec la fonction count()) pour leur pays de naissance (born_country) et arrangez le data frame résultant par ordre décroissant du nombre d’observations pour chaque pays. Quel pays est le plus commun ?\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\nMaintenant, relisez votre rapport pour vous assurer que vous avez répondu à toutes les questions et que tous vos blocs de code R sont correctement étiquetés."
  },
  {
    "objectID": "labs/Semaine1.html#analyse-et-visualisation-de-données",
    "href": "labs/Semaine1.html#analyse-et-visualisation-de-données",
    "title": "Semaine1",
    "section": "Analyse et visualisation de données",
    "text": "Analyse et visualisation de données\n\n“La plupart des lauréats vivants du prix Nobel étaient basés aux États-Unis lorsqu’ils ont remporté leurs prix”\n… dit l’article de Buzzfeed. Voyons si c’est vrai.\nTout d’abord, nous allons créer une nouvelle variable pour identifier si le lauréat vivait aux États-Unis lorsqu’il a remporté son prix. Pour cela, nous utiliserons la fonction mutate(). Créez une nouvelle colonne country_us qui sera égale à \"USA\" si le country est égal à “USA” et à \"Other\" sinon. Pour cela, pensez à utiliser la fonction if_else dans votre mutate.\nNous voudrons ensuite transformer cette colonne en facteur, ce qui est toujours utile lorsqu’on travaille avec des données catégoriques. Pour cela, vous pouvez utiliser la fonction fct_relvel() en précisant la colonne à mettre en facteur et le nom des niveaux (ici “USA” en premier et “Other” en deuxième).\nPour la suite de l’exercice, nous limiterons notre analyse aux catégories suivantes : Physique, Médecine, Chimie et Économie.\nCréez un nouveau data frame appelé nobel_living_science qui filtre pour les catégories suivantes : Physique, Médecine, Chimie et Économie.\nPour cela, vous pouvez tester si category est dans le vecteur c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"). Profitez-en également pour transformer cette colonne en facteurs également, en les ordonant par ordre alphabétique.\nPour le prochain exercice, travaillez avec le data frame nobel_living_science que nous avons créé ci-dessus.\nCréez un graphique à barres avec des facets visualisant la relation entre la catégorie du prix Nobel et si le lauréat était aux États-Unis lorsqu’il l’a remporté.\nPour rappel, les graphiques peuvent être créés de la forme:\n\nnobel_living_science %&gt;%\n  ggplot(aes(...)) +\n    geom_XXX(...)\n\nPar exemple,\n\nnobel_living_science %&gt;%\n  ggplot(aes(x=country_us, fill = country_us)) +\n  geom_bar() +\n   labs(x = \"Pays de résidence\",                 # On met à jour les labels\n       y = \"Nombre de lauréats\",\n       title = \"Pays de résidence des lauréats vivants du prix Nobel\",\n       subtitle = \"Selon si le pays de résidence correspond aux USA ou non\",\n       fill = \"Pays du lauréat\")\n\n\n\n\n\n\n\n\nPour créer des facettes selon les catégories, vous pouvez ajouter la fonction facet_wrap. Votre visualisation doit avoir:\n\nVotre visualisation doit être facettée par catégorie.\nPour chaque facette, vous devez avoir deux barres, une pour les gagnants aux États-Unis et une pour les autres.\nInversez les coordonnées pour que les barres soient horizontales, pas verticales.\n\n\n\n\n\n\n\n\n\n\nInterprétez votre visualisation et commentez le titre de Buzzfeed en regardant s’il est soutenu par les données.\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\n\n\n“Mais parmi ces lauréats du prix Nobel basés aux États-Unis, beaucoup sont nés dans d’autres pays”\nCréez une nouvelle variable appelée born_country_us qui a la valeur \"USA\" si le lauréat est né aux États-Unis, et \"Other\" sinon. Combien de gagnants sont nés aux États-Unis ?\nAjoutez une deuxième variable à votre visualisation de l’exercice 4 basée sur si le lauréat est né aux États-Unis ou non. D’après votre visualisation, les données semblent-elles soutenir l’affirmation de Buzzfeed ? Expliquez votre raisonnement en 1-2 phrases.\n\nVotre visualisation finale doit contenir une facette pour chaque catégorie.\nDans chaque facette, il doit y avoir une barre pour savoir si le lauréat a remporté le prix aux États-Unis ou non.\nChaque barre doit avoir des segments pour savoir si le lauréat est né aux États-Unis ou non.\n\n\n\n\n\n\n\n\n\n\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\n\n\nD’où viennent les lauréats nés à l’étranger qui ont remporté leur prix aux États-Unis ?\nDans un seul pipeline, filtrez pour les lauréats qui ont remporté leur prix aux États-Unis, mais qui sont nés en dehors des États-Unis, puis créez un tableau de fréquence (avec la fonction count()) pour leur pays de naissance (born_country) et arrangez le data frame résultant par ordre décroissant du nombre d’observations pour chaque pays. Quel pays est le plus commun ?\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\nMaintenant, relisez votre rapport pour vous assurer que vous avez répondu à toutes les questions et que tous vos blocs de code R sont correctement étiquetés."
  },
  {
    "objectID": "labs/Semaine2.html",
    "href": "labs/Semaine2.html",
    "title": "Semaine 2 - Machine Learning",
    "section": "",
    "text": "L’objectif de ce lab est de nous familiariser avec la logique derrière le machine learning en utilisant la suite de package tidymodels.\nPour cela, nous allons travailler sur un jeu de données qui contient des informations sur des maisons à vendre dans la ville de Ames, Iowa, USA. Nous allons notament chercher à prédire le prix de vente des maisons en fonction des différentes caractéristiques."
  },
  {
    "objectID": "labs/Semaine2.html#chargement-des-données",
    "href": "labs/Semaine2.html#chargement-des-données",
    "title": "Semaine 2 - Machine Learning",
    "section": "Chargement des données",
    "text": "Chargement des données\n\ndata(ames, package = \"modeldata\")\n\ndim(ames)\n\n[1] 2930   74\n\n\nNous pouvons jeter un coup d’oeil aux données:\n\nglimpse(ames)\n\nRows: 2,930\nColumns: 74\n$ MS_SubClass        &lt;fct&gt; One_Story_1946_and_Newer_All_Styles, One_Story_1946…\n$ MS_Zoning          &lt;fct&gt; Residential_Low_Density, Residential_High_Density, …\n$ Lot_Frontage       &lt;dbl&gt; 141, 80, 81, 93, 74, 78, 41, 43, 39, 60, 75, 0, 63,…\n$ Lot_Area           &lt;int&gt; 31770, 11622, 14267, 11160, 13830, 9978, 4920, 5005…\n$ Street             &lt;fct&gt; Pave, Pave, Pave, Pave, Pave, Pave, Pave, Pave, Pav…\n$ Alley              &lt;fct&gt; No_Alley_Access, No_Alley_Access, No_Alley_Access, …\n$ Lot_Shape          &lt;fct&gt; Slightly_Irregular, Regular, Slightly_Irregular, Re…\n$ Land_Contour       &lt;fct&gt; Lvl, Lvl, Lvl, Lvl, Lvl, Lvl, Lvl, HLS, Lvl, Lvl, L…\n$ Utilities          &lt;fct&gt; AllPub, AllPub, AllPub, AllPub, AllPub, AllPub, All…\n$ Lot_Config         &lt;fct&gt; Corner, Inside, Corner, Corner, Inside, Inside, Ins…\n$ Land_Slope         &lt;fct&gt; Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, G…\n$ Neighborhood       &lt;fct&gt; North_Ames, North_Ames, North_Ames, North_Ames, Gil…\n$ Condition_1        &lt;fct&gt; Norm, Feedr, Norm, Norm, Norm, Norm, Norm, Norm, No…\n$ Condition_2        &lt;fct&gt; Norm, Norm, Norm, Norm, Norm, Norm, Norm, Norm, Nor…\n$ Bldg_Type          &lt;fct&gt; OneFam, OneFam, OneFam, OneFam, OneFam, OneFam, Twn…\n$ House_Style        &lt;fct&gt; One_Story, One_Story, One_Story, One_Story, Two_Sto…\n$ Overall_Cond       &lt;fct&gt; Average, Above_Average, Above_Average, Average, Ave…\n$ Year_Built         &lt;int&gt; 1960, 1961, 1958, 1968, 1997, 1998, 2001, 1992, 199…\n$ Year_Remod_Add     &lt;int&gt; 1960, 1961, 1958, 1968, 1998, 1998, 2001, 1992, 199…\n$ Roof_Style         &lt;fct&gt; Hip, Gable, Hip, Hip, Gable, Gable, Gable, Gable, G…\n$ Roof_Matl          &lt;fct&gt; CompShg, CompShg, CompShg, CompShg, CompShg, CompSh…\n$ Exterior_1st       &lt;fct&gt; BrkFace, VinylSd, Wd Sdng, BrkFace, VinylSd, VinylS…\n$ Exterior_2nd       &lt;fct&gt; Plywood, VinylSd, Wd Sdng, BrkFace, VinylSd, VinylS…\n$ Mas_Vnr_Type       &lt;fct&gt; Stone, None, BrkFace, None, None, BrkFace, None, No…\n$ Mas_Vnr_Area       &lt;dbl&gt; 112, 0, 108, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6…\n$ Exter_Cond         &lt;fct&gt; Typical, Typical, Typical, Typical, Typical, Typica…\n$ Foundation         &lt;fct&gt; CBlock, CBlock, CBlock, CBlock, PConc, PConc, PConc…\n$ Bsmt_Cond          &lt;fct&gt; Good, Typical, Typical, Typical, Typical, Typical, …\n$ Bsmt_Exposure      &lt;fct&gt; Gd, No, No, No, No, No, Mn, No, No, No, No, No, No,…\n$ BsmtFin_Type_1     &lt;fct&gt; BLQ, Rec, ALQ, ALQ, GLQ, GLQ, GLQ, ALQ, GLQ, Unf, U…\n$ BsmtFin_SF_1       &lt;dbl&gt; 2, 6, 1, 1, 3, 3, 3, 1, 3, 7, 7, 1, 7, 3, 3, 1, 3, …\n$ BsmtFin_Type_2     &lt;fct&gt; Unf, LwQ, Unf, Unf, Unf, Unf, Unf, Unf, Unf, Unf, U…\n$ BsmtFin_SF_2       &lt;dbl&gt; 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0…\n$ Bsmt_Unf_SF        &lt;dbl&gt; 441, 270, 406, 1045, 137, 324, 722, 1017, 415, 994,…\n$ Total_Bsmt_SF      &lt;dbl&gt; 1080, 882, 1329, 2110, 928, 926, 1338, 1280, 1595, …\n$ Heating            &lt;fct&gt; GasA, GasA, GasA, GasA, GasA, GasA, GasA, GasA, Gas…\n$ Heating_QC         &lt;fct&gt; Fair, Typical, Typical, Excellent, Good, Excellent,…\n$ Central_Air        &lt;fct&gt; Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, …\n$ Electrical         &lt;fct&gt; SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SB…\n$ First_Flr_SF       &lt;int&gt; 1656, 896, 1329, 2110, 928, 926, 1338, 1280, 1616, …\n$ Second_Flr_SF      &lt;int&gt; 0, 0, 0, 0, 701, 678, 0, 0, 0, 776, 892, 0, 676, 0,…\n$ Gr_Liv_Area        &lt;int&gt; 1656, 896, 1329, 2110, 1629, 1604, 1338, 1280, 1616…\n$ Bsmt_Full_Bath     &lt;dbl&gt; 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, …\n$ Bsmt_Half_Bath     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Full_Bath          &lt;int&gt; 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 2, …\n$ Half_Bath          &lt;int&gt; 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, …\n$ Bedroom_AbvGr      &lt;int&gt; 3, 2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2, 1, 4, 4, …\n$ Kitchen_AbvGr      &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ TotRms_AbvGrd      &lt;int&gt; 7, 5, 6, 8, 6, 7, 6, 5, 5, 7, 7, 6, 7, 5, 4, 12, 8,…\n$ Functional         &lt;fct&gt; Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, T…\n$ Fireplaces         &lt;int&gt; 2, 0, 0, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, …\n$ Garage_Type        &lt;fct&gt; Attchd, Attchd, Attchd, Attchd, Attchd, Attchd, Att…\n$ Garage_Finish      &lt;fct&gt; Fin, Unf, Unf, Fin, Fin, Fin, Fin, RFn, RFn, Fin, F…\n$ Garage_Cars        &lt;dbl&gt; 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, …\n$ Garage_Area        &lt;dbl&gt; 528, 730, 312, 522, 482, 470, 582, 506, 608, 442, 4…\n$ Garage_Cond        &lt;fct&gt; Typical, Typical, Typical, Typical, Typical, Typica…\n$ Paved_Drive        &lt;fct&gt; Partial_Pavement, Paved, Paved, Paved, Paved, Paved…\n$ Wood_Deck_SF       &lt;int&gt; 210, 140, 393, 0, 212, 360, 0, 0, 237, 140, 157, 48…\n$ Open_Porch_SF      &lt;int&gt; 62, 0, 36, 0, 34, 36, 0, 82, 152, 60, 84, 21, 75, 0…\n$ Enclosed_Porch     &lt;int&gt; 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Three_season_porch &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Screen_Porch       &lt;int&gt; 0, 120, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 140, …\n$ Pool_Area          &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Pool_QC            &lt;fct&gt; No_Pool, No_Pool, No_Pool, No_Pool, No_Pool, No_Poo…\n$ Fence              &lt;fct&gt; No_Fence, Minimum_Privacy, No_Fence, No_Fence, Mini…\n$ Misc_Feature       &lt;fct&gt; None, None, Gar2, None, None, None, None, None, Non…\n$ Misc_Val           &lt;int&gt; 0, 0, 12500, 0, 0, 0, 0, 0, 0, 0, 0, 500, 0, 0, 0, …\n$ Mo_Sold            &lt;int&gt; 5, 6, 6, 4, 3, 6, 4, 1, 3, 6, 4, 3, 5, 2, 6, 6, 6, …\n$ Year_Sold          &lt;int&gt; 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 201…\n$ Sale_Type          &lt;fct&gt; WD , WD , WD , WD , WD , WD , WD , WD , WD , WD , W…\n$ Sale_Condition     &lt;fct&gt; Normal, Normal, Normal, Normal, Normal, Normal, Nor…\n$ Sale_Price         &lt;int&gt; 215000, 105000, 172000, 244000, 189900, 195500, 213…\n$ Longitude          &lt;dbl&gt; -93.61975, -93.61976, -93.61939, -93.61732, -93.638…\n$ Latitude           &lt;dbl&gt; 42.05403, 42.05301, 42.05266, 42.05125, 42.06090, 4…\n\n\nQuestion 1: Faites un historgramme pour représenter les prix de vente des maisons. Faites un deuxième histogramme en utilisant une échelle logarithmique sur le prix."
  },
  {
    "objectID": "labs/Semaine2.html#construction-du-modèle",
    "href": "labs/Semaine2.html#construction-du-modèle",
    "title": "Semaine 2 - Machine Learning",
    "section": "Construction du modèle",
    "text": "Construction du modèle\nIl existe de nombreux packages et fonctions pour faire appel à toute une collection de modèles. Tidymodels propose une interface unique à de nombreux modèles. Cela permet d’interagir de manière “unique” avec les modèles et leurs résultats.\nL’approche de base pour un modèle consiste à:\n\nSpécifier le modèle mathématique souhaité.\nSpécifier le “moteur” ( engine ) à utiliser pour le modèle. Souvent, cela correspond au package dans lequel on retrouve la fonction.\nDans certains cas, préciser le mode dans lequel le modèle va être utilisé. De base, si l’on travaille des données numériques, le mode sera Regression et si les données sont catégoriques, il sera Classification. Il est possible de le préciser explicitement.\n\nPar exemple, pour une regression linéaire, nous pourrions avoir:\n\nlinear_reg() %&gt;%\n  set_engine(\"lm\")\n\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\nlinear_reg() %&gt;%\n  set_engine(\"glmnet\")\n\nLinear Regression Model Specification (regression)\n\nComputational engine: glmnet \n\n\nNous allons commencer avec une simple regression linéaire (engine : \"lm\"). Nous pouvons définir le modèle:\n\nlm_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\")\n\nNous pourrions également utiliser un Random Forest. Pour cela, nous allons utiliser celui du package \"ranger\" (que vous devrez probablement installer). Il est possible que le modèle que nous souhaitons utiliser ait besoin de paramètres à préciser. Nous pouvons le faire à la définition du modèle:\n\nrf_model &lt;- rand_forest(trees = 1000, min_n = 5) %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\")\n\nIci, nous avons préciser directement les arguments trees et min_n. Nous verrons la semaine prochaine comment tester plusieurs valeurs pour ces hyperparamètres. Nous avons également précisé que nous souhaitons faire du Random Forest en mode régession.\nÀ tout moment, vous pouvez aller consulter la doc des fonctions sur le site de tidymodels ou avec la commande ?rand_forest ou ?linear_reg.\nLa liste des différents modèles disponibles peut être consultée dans la documentation du package parsnip (partie de tidymodels)"
  },
  {
    "objectID": "labs/Semaine2.html#entraînement-du-modèle",
    "href": "labs/Semaine2.html#entraînement-du-modèle",
    "title": "Semaine 2 - Machine Learning",
    "section": "Entraînement du modèle",
    "text": "Entraînement du modèle\nPour entraîner le modèle, il suffit de le fit sur des données. Il faut en revanche indiquer via une formule ce que nous souhaitons modéliser.\nLa forme générale pour les formules permet d’indiquer la variable expliquée ( response ou outcome ) en fonction des variables explicatives ( predictor ). En R, les formules sont écrite de la manière var_expliquee ~ var_explicative. Pour utiliser toutes les variables comme explicatives, on peut simplement écrire var_expliquee ~ .. Pour en savoir plus sur les formules et les possibilités, vous pouvez lire ce chapitre (Kuhn and Silge, 2022).\nPar exemple, si nous voulons prédire le prix en fonction de la localisation de la maison, nous pouvons indiquer:\n\nlm_fit &lt;- lm_model %&gt;%\n  fit(Sale_Price ~ Longitude + Latitude, data= ames_train)\n\nL’argument data indique sur quelles données faire le fit.\nNous pouvons, également entrainer notre modèle de Random Forest:\n\nrf_fit &lt;- rf_model %&gt;%\n  fit(Sale_Price ~ Longitude + Latitude, data= ames_train)"
  },
  {
    "objectID": "labs/Semaine2.html#résultats-de-lentrainement",
    "href": "labs/Semaine2.html#résultats-de-lentrainement",
    "title": "Semaine 2 - Machine Learning",
    "section": "Résultats de l’entrainement",
    "text": "Résultats de l’entrainement\nPour afficher les résultats de l’entraînement, il y a plusieurs manières de faire, selon que nous voulons les afficher ou les visualiser.\nUne première approche consiste à extraire les paramètres de fit:\n\nlm_fit %&gt;% extract_fit_engine()\n\n\nCall:\nstats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n\nCoefficients:\n(Intercept)    Longitude     Latitude  \n -133779792      -823798      1351690  \n\nrf_fit %&gt;% extract_fit_engine()\n\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, num.trees = ~1000,      min.node.size = min_rows(~5, x), num.threads = 1, verbose = FALSE,      seed = sample.int(10^5, 1)) \n\nType:                             Regression \nNumber of trees:                  1000 \nSample size:                      2197 \nNumber of independent variables:  2 \nMtry:                             1 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       1842151707 \nR squared (OOB):                  0.7129196 \n\n\nFaite attention que certaines méthodes ne fonctionnent que pour les résultats de certains modèles. Par exemple, la fonction tidy() du package broom (inclus dans tidymodels) permet d’afficher certains résultats pour le résultats de la régrssion linéaire mais pas ceux du Random Forest.\n\ntidy(lm_fit)\n\n# A tibble: 3 × 5\n  term           estimate std.error statistic  p.value\n  &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept) -133779792.  6803737.     -19.7 2.08e-79\n2 Longitude      -823798.    60860.     -13.5 3.75e-40\n3 Latitude       1351690.    84586.      16.0 1.85e-54\n\n\nDans ces cas, il ne faut pas hésiter à rechercher un peu dans la doc la meilleure manière d’afficher les résultats.\nIl est déjà possible à cette étape d’avoir une idée de la performance du modèle, sur les données d’entrainement. Vous l’avez peut-être vu pour le Random Forest, quand nous affichons les détails du modèle, un \\(R^2\\) est indiqué. Pour les résultats de la régression linéaire, on peut utiliser glance()\n\nlm_fit %&gt;% glance()\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared  sigma statistic  p.value    df  logLik    AIC    BIC\n      &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     0.163         0.162 73331.      213. 2.38e-85     2 -27728. 55465. 55487.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "labs/Semaine2.html#faire-des-prédictions",
    "href": "labs/Semaine2.html#faire-des-prédictions",
    "title": "Semaine 2 - Machine Learning",
    "section": "Faire des prédictions",
    "text": "Faire des prédictions\nL’idée de cette étape est d’appliquer le modèle entraîné sur des données, en générale celles de tests. De base, cela se fait via la fonction predict:\n\nlm_fit %&gt;% predict(new_data = ames_test)\n\n# A tibble: 733 × 1\n     .pred\n     &lt;dbl&gt;\n 1 213054.\n 2 202464.\n 3 196577.\n 4 227633.\n 5 225029.\n 6 224060.\n 7 221036.\n 8 217686.\n 9 218026.\n10 215263.\n# ℹ 723 more rows\n\n\nComme vous le voyez, nous obtenons une liste de valeur prédite. La colonne contenant celles-ci s’appelle .pred.\nIl est souvent utile coller les prédictions au tableau des données de test:\n\nlm_pred &lt;- lm_fit %&gt;%\n  predict(new_data = ames_test) %&gt;%\n  bind_cols(ames_test)\n\nCette fois, nous obtenons un tableau complet, avec les données réelles et les données prédites. Nous pouvons par exemple les visualiser:\n\nlm_pred %&gt;%\n  ggplot(aes(x=.pred, y=Sale_Price)) +\n  geom_point(alpha = .5)\n\n\n\n\n\n\n\n\nQuestion 2: Faites de même pour le modèle Random Forest ! Que constatez vous ?"
  },
  {
    "objectID": "labs/Semaine1.html#manipulation-de-données",
    "href": "labs/Semaine1.html#manipulation-de-données",
    "title": "Semaine 1 - Data wrangling",
    "section": "Manipulation de données",
    "text": "Manipulation de données\nNous allons commencer par jeter un coup d’oeil au tableau que nous avons chargé. Pour cela, nous pouvons utiliser la fonction glimpse()\n\n\nRows: 935\nColumns: 26\n$ id                    &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 6, 8, 9, 10, 11, 12, 13, 14, 1…\n$ firstname             &lt;chr&gt; \"Wilhelm Conrad\", \"Hendrik A.\", \"Pieter\", \"Henri…\n$ surname               &lt;chr&gt; \"Röntgen\", \"Lorentz\", \"Zeeman\", \"Becquerel\", \"Cu…\n$ year                  &lt;dbl&gt; 1901, 1902, 1902, 1903, 1903, 1903, 1911, 1904, …\n$ category              &lt;chr&gt; \"Physics\", \"Physics\", \"Physics\", \"Physics\", \"Phy…\n$ affiliation           &lt;chr&gt; \"Munich University\", \"Leiden University\", \"Amste…\n$ city                  &lt;chr&gt; \"Munich\", \"Leiden\", \"Amsterdam\", \"Paris\", \"Paris…\n$ country               &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ born_date             &lt;date&gt; 1845-03-27, 1853-07-18, 1865-05-25, 1852-12-15,…\n$ died_date             &lt;date&gt; 1923-02-10, 1928-02-04, 1943-10-09, 1908-08-25,…\n$ gender                &lt;chr&gt; \"male\", \"male\", \"male\", \"male\", \"male\", \"female\"…\n$ born_city             &lt;chr&gt; \"Remscheid\", \"Arnhem\", \"Zonnemaire\", \"Paris\", \"P…\n$ born_country          &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ born_country_code     &lt;chr&gt; \"DE\", \"NL\", \"NL\", \"FR\", \"FR\", \"PL\", \"PL\", \"GB\", …\n$ died_city             &lt;chr&gt; \"Munich\", NA, \"Amsterdam\", NA, \"Paris\", \"Sallanc…\n$ died_country          &lt;chr&gt; \"Germany\", \"Netherlands\", \"Netherlands\", \"France…\n$ died_country_code     &lt;chr&gt; \"DE\", \"NL\", \"NL\", \"FR\", \"FR\", \"FR\", \"FR\", \"GB\", …\n$ overall_motivation    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ share                 &lt;dbl&gt; 1, 2, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, …\n$ motivation            &lt;chr&gt; \"\\\"in recognition of the extraordinary services …\n$ born_country_original &lt;chr&gt; \"Prussia (now Germany)\", \"the Netherlands\", \"the…\n$ born_city_original    &lt;chr&gt; \"Lennep (now Remscheid)\", \"Arnhem\", \"Zonnemaire\"…\n$ died_country_original &lt;chr&gt; \"Germany\", \"the Netherlands\", \"the Netherlands\",…\n$ died_city_original    &lt;chr&gt; \"Munich\", NA, \"Amsterdam\", NA, \"Paris\", \"Sallanc…\n$ city_original         &lt;chr&gt; \"Munich\", \"Leiden\", \"Amsterdam\", \"Paris\", \"Paris…\n$ country_original      &lt;chr&gt; \"Germany\", \"the Netherlands\", \"the Netherlands\",…\n\n\nIl est ainsi possible de voir pour chaque colonne, le type de données qui a été détecté lors de l’importation, et un coup d’oeils aux premières valeurs. C’est le moment de repérer si un type ne convient pas.\n\nExploration de données\nCombien d’observations et combien de variables y a-t-il dans le jeu de données ? Que représente chaque ligne ?\n\n\nSélection de données\nIl y a quelques observations dans ce jeu de données que nous exclurons de notre analyse pour correspondre aux résultats de Buzzfeed.\nPour rappel, les différents verbes du tidyverse permettent de manipuler les données:\n\nselect: Sélectionner une colonne\narrange: Ordonner les lignes\nslice: Sélectionner des lignes (par les index)\nfilter: Sélectionner des lignes selon des critères\ndistinct: Filtrer les lignes uniques\nmutate: Ajout de nouvelles variables\nsummarise: Réduire variables en valeurs\ngroup_by: Regrouper des observations selon une variable\n\nCountez le nombre de valeur NA pour la colonne country. Pour cela, vous pouvez utiliser les fonctions filter, is.na et count.\nQuelles sont les valeurs possibles pour la variable gender ? La valeur org signifie qu’une organisation a gagné le prix Nobel.\nNous allons maintenant vouloir sélectionner seulement les entrées qui ont toutes les valeur nécessaire, c’est-à-dire des personnes vivantes dont on connait le pays d’origine.\nCréez un nouveau data frame appelé nobel_living qui filtre pour\n\nles lauréats pour lesquels country est disponible\nles lauréats qui sont des personnes par opposition aux organisations (les organisations sont désignées par org dans la variable gender)\nles lauréats vivant, c’est-à-dire les entrées dont la died_date est NA\n\nVérifiez que vous obtenez bien un data frame avec 228 observations après avoir filtré les données.\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\n\n\nAnalyse et visualisation de données\n\n“La plupart des lauréats vivants du prix Nobel étaient basés aux États-Unis lorsqu’ils ont remporté leurs prix”\n… dit l’article de Buzzfeed. Voyons si c’est vrai.\nTout d’abord, nous allons créer une nouvelle variable pour identifier si le lauréat vivait aux États-Unis lorsqu’il a remporté son prix. Pour cela, nous utiliserons la fonction mutate(). Créez une nouvelle colonne country_us qui sera égale à \"USA\" si le country est égal à “USA” et à \"Other\" sinon. Pour cela, pensez à utiliser la fonction if_else dans votre mutate.\nNous voudrons ensuite transformer cette colonne en facteur, ce qui est toujours utile lorsqu’on travaille avec des données catégoriques. Pour cela, vous pouvez utiliser la fonction fct_relvel() en précisant la colonne à mettre en facteur et le nom des niveaux (ici “USA” en premier et “Other” en deuxième).\nPour la suite de l’exercice, nous limiterons notre analyse aux catégories suivantes : Physique, Médecine, Chimie et Économie.\nCréez un nouveau data frame appelé nobel_living_science qui filtre pour les catégories suivantes : Physique, Médecine, Chimie et Économie.\nPour cela, vous pouvez tester si category est dans le vecteur c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"). Profitez-en également pour transformer cette colonne en facteurs également, en les ordonant par ordre alphabétique.\nPour le prochain exercice, travaillez avec le data frame nobel_living_science que nous avons créé ci-dessus.\nCréez un graphique à barres avec des facets visualisant la relation entre la catégorie du prix Nobel et si le lauréat était aux États-Unis lorsqu’il l’a remporté.\nPour rappel, les graphiques peuvent être créés de la forme:\n\nnobel_living_science %&gt;%\n  ggplot(aes(...)) +\n    geom_XXX(...)\n\nPar exemple,\n\nnobel_living_science %&gt;%\n  ggplot(aes(x=country_us, fill = country_us)) +\n  geom_bar() +\n   labs(x = \"Pays de résidence\",                 # On met à jour les labels\n       y = \"Nombre de lauréats\",\n       title = \"Pays de résidence des lauréats vivants du prix Nobel\",\n       subtitle = \"Selon si le pays de résidence correspond aux USA ou non\",\n       fill = \"Pays du lauréat\")\n\n\n\n\n\n\n\n\nPour créer des facettes selon les catégories, vous pouvez ajouter la fonction facet_wrap. Votre visualisation doit avoir:\n\nVotre visualisation doit être facettée par catégorie.\nPour chaque facette, vous devez avoir deux barres, une pour les gagnants aux États-Unis et une pour les autres.\nInversez les coordonnées pour que les barres soient horizontales, pas verticales.\n\n\n\n\n\n\n\n\n\n\nInterprétez votre visualisation et commentez le titre de Buzzfeed en regardant s’il est soutenu par les données.\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\n\n\n“Mais parmi ces lauréats du prix Nobel basés aux États-Unis, beaucoup sont nés dans d’autres pays”\nCréez une nouvelle variable appelée born_country_us qui a la valeur \"USA\" si le lauréat est né aux États-Unis, et \"Other\" sinon. Combien de gagnants sont nés aux États-Unis ?\nAjoutez une deuxième variable à votre visualisation de l’exercice 4 basée sur si le lauréat est né aux États-Unis ou non. D’après votre visualisation, les données semblent-elles soutenir l’affirmation de Buzzfeed ? Expliquez votre raisonnement en 1-2 phrases.\n\nVotre visualisation finale doit contenir une facette pour chaque catégorie.\nDans chaque facette, il doit y avoir une barre pour savoir si le lauréat a remporté le prix aux États-Unis ou non.\nChaque barre doit avoir des segments pour savoir si le lauréat est né aux États-Unis ou non.\n\n\n\n\n\n\n\n\n\n\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\n\n\nD’où viennent les lauréats nés à l’étranger qui ont remporté leur prix aux États-Unis ?\nDans un seul pipeline, filtrez pour les lauréats qui ont remporté leur prix aux États-Unis, mais qui sont nés en dehors des États-Unis, puis créez un tableau de fréquence (avec la fonction count()) pour leur pays de naissance (born_country) et arrangez le data frame résultant par ordre décroissant du nombre d’observations pour chaque pays. Quel pays est le plus commun ?\n🧶 ✅ ⬆️ Knit, commit, and push ! N’oubliez pas le message de commit.\nMaintenant, relisez votre rapport pour vous assurer que vous avez répondu à toutes les questions et que tous vos blocs de code R sont correctement étiquetés."
  },
  {
    "objectID": "labs/Semaine1.html#intéressé-par-la-façon-dont-buzzfeed-a-réalisé-leurs-visualisations",
    "href": "labs/Semaine1.html#intéressé-par-la-façon-dont-buzzfeed-a-réalisé-leurs-visualisations",
    "title": "Semaine 1 - Data wrangling",
    "section": "Intéressé par la façon dont Buzzfeed a réalisé leurs visualisations ?",
    "text": "Intéressé par la façon dont Buzzfeed a réalisé leurs visualisations ?\nLes graphiques dans l’article de Buzzfeed sont appelés des graphiques en gaufre (waffle plots). Vous pouvez trouver le code utilisé pour réaliser ces graphiques dans le dépôt GitHub de Buzzfeed (oui, ils en ont un !) ici. Vous pouvez essayer de recréer ces graphiques pour le plaisir, mais ce n’est pas une exigence pour ce lab."
  },
  {
    "objectID": "classroom/01_Nobel-laureates/nobel-laureates.html",
    "href": "classroom/01_Nobel-laureates/nobel-laureates.html",
    "title": "Nobel laureates",
    "section": "",
    "text": "library(tidyverse) \n\n\nnobel &lt;- read_csv(\"data/nobel.csv\")"
  },
  {
    "objectID": "classroom/01_Nobel-laureates/nobel-laureates.html#titre",
    "href": "classroom/01_Nobel-laureates/nobel-laureates.html#titre",
    "title": "Nobel laureates",
    "section": "Titre",
    "text": "Titre\n\nQuestion 1\nRemplacez ce texte par vos réponses aux questions. Ajoutez les blocs de code nécessaires. N’oubliez pas d’étiqueter vos blocs de code.\n\n\nQuestion 2\nRemplacez ce texte par vos réponses aux questions. Ajoutez les blocs de code nécessaires. N’oubliez pas d’étiqueter vos blocs de code.\n\n\nQuestion 3\nRemplacez ce texte par vos réponses aux questions. Ajoutez les blocs de code nécessaires. N’oubliez pas d’étiqueter vos blocs de code.\n\n\nQuestion 4\n…\n\n\nQuestion 5\n…\n\n\nQuestion 6\n…\n\n\nQuestion 7\n…"
  },
  {
    "objectID": "labs/Semaine2.html#les-données",
    "href": "labs/Semaine2.html#les-données",
    "title": "Semaine 2 - Machine Learning",
    "section": "Les données",
    "text": "Les données\nNous allons travailler sur un jeu de données qui contient des informations sur des réservations d’hôtels. Nous allons essayer de prédire si une réservation avait des enfants. Pour cela, nous allons utiliser des méthodes de classification.\n\nlibrary(tidymodels)\nlibrary(readr)\n\nhotels &lt;- \n  read_csv(\"https://tidymodels.org/start/case-study/hotels.csv\") %&gt;%\n  mutate(across(where(is.character), as.factor))\n\ndim(hotels)\n\n[1] 50000    23\n\n\nQuestion 4: Déterminez la proportion de réservations qui ont des enfants."
  },
  {
    "objectID": "labs/Semaine2.html#séparation-des-données-1",
    "href": "labs/Semaine2.html#séparation-des-données-1",
    "title": "Semaine 2 - Machine Learning",
    "section": "Séparation des données",
    "text": "Séparation des données\nQuestion 5: Commencez par fixer un seed et puis divisez les données en un ensemble d’entraînement et un ensemble de test. Utilisez 75% des données pour l’entraînement. Assurez-vous que les proportions de réservations avec enfants sont les mêmes dans les deux ensembles."
  },
  {
    "objectID": "labs/Semaine2.html#premier-modèle-régression-logistique",
    "href": "labs/Semaine2.html#premier-modèle-régression-logistique",
    "title": "Semaine 2 - Machine Learning",
    "section": "Premier modèle: Régression logistique",
    "text": "Premier modèle: Régression logistique\n\nChoix du modèle\nQuestion 6: Configurez un modèle de regression logistique en utilisant la fonction logistic_reg(). Utilisez la fonction set_engine() pour spécifier que vous voulez utiliser la fonction glm(). Nous travaillons en mode Classification.\n\n\nRecette\nQuestion 7: Créez une recette pour le modèle en utilisant la fonction recipe().\nNous allons utiliser les recettes suivantes:\n\nstep_date(): pour créer les variable de l’année, du mois et du jour de la semaine\nstep_holiday(): pour créer une variable qui indique si la réservation a été faite pendant une période de vacances. Nous vous avons fourni une liste de vacances dans le fichier de réponse (voir ci-dessous). Vous pouvez indiquer d’utiliser cette liste avec step_holiday(arrival_date, holidays = holidays)\nstep_rm(): pour supprimer les variables arrival_date\n\nNous allons également transformer les variables catégorielles en dummy variables et les variables numériques en variables centrées et réduites.\n\nstep_dummy() pour convertir les variables catégorielles (all_nominal_predictors()) en variables binaires\nstep_zv() permet d’enlever les variables qui ne contiennent qu’une unique valeur (all_predictors())\nstep_normalize() pour centrer et réduire les variables numériques (all_numeric_predictors())\n\nPour step_holiday, vous pouvez utiliser la liste suivante:\n\nholidays &lt;- c(\"AllSouls\", \"AshWednesday\", \"ChristmasEve\", \"Easter\", \n              \"ChristmasDay\", \"GoodFriday\", \"NewYearsDay\", \"PalmSunday\")\n\n\n\nCréation du workflow\nQuestion 8: Créez un workflow en utilisant la fonction workflow(). Ajoutez-y la recette et le modèle.\n\n\nEntraînement et Prédiction\nQuestion 9: Fittez votre modèle\nQuestion 10: Prédisez le modèle en utilisant le bloc de code ci-dessous. Expliquez ce qu’il fait !\n\nlr_pred &lt;- predict(lr_fit, hotel_test) %&gt;%\n  bind_cols(predict(lr_fit, hotel_test, type = \"prob\")) %&gt;%\n  bind_cols(hotel_test %&gt;% select(children))\n\n\n\nÉvaluation du modèle\nNous allons générer une courbe ROC pour évaluer le modèle\n\nlr_auc &lt;- lr_pred %&gt;%\n  roc_curve(children, .pred_children) %&gt;%\n  mutate(model = \"Logistic Regression\")\n\nlr_auc %&gt;% autoplot()"
  }
]