---
title: "Semaine 1"
---


En janvier 2017, Buzzfeed a publi√© un article sur pourquoi les laur√©ats du prix Nobel montrent que l‚Äôimmigration est si importante pour la science am√©ricaine. 

Vous pouvez lire l‚Äôarticle [ici](https://www.buzzfeednews.com/article/peteraldhous/immigration-and-science). Dans l‚Äôarticle, ils montrent que bien que la plupart des laur√©ats vivants du prix Nobel en sciences soient bas√©s aux √âtats-Unis, beaucoup d‚Äôentre eux sont n√©s dans d‚Äôautres pays. C‚Äôest une des raisons pour lesquelles le monde scientifique dit que l‚Äôimmigration est vitale pour le progr√®s. Dans ce lab, nous travaillerons avec les donn√©es de cet article pour recr√©er certaines de leurs visualisations ainsi qu‚Äôexplorer de nouvelles questions.


# Getting started

Sur le portail de cours, vous trouverez le lien d'invitation pour ce lab. Cela vous donnera acc√®s √† un r√©po, qui devrait √™tre nomm√© `lab-03-nobel-laureates-VOTRE_GITHUB_USERNAME`.
Une fois que vous avez accept√© l'invitation, vous aurez acc√®s √† un r√©po priv√© sur GitHub avec le mat√©riel pour ce lab.
R√©cup√©rez le lien du repo et clonez le sur RStudio.
V√©rifiez qu'il compile sans erreur.
Dans le *YAML*, le `output` est r√©gl√© sur `"github_document"`. Cela permet d'obtenir un format adapt√© √† GitHub. Notamment, votre fichier final sera un fichier Markdown (`.md`).

## √âchauffement

Avant d‚Äôintroduire les donn√©es, commen√ßons par quelques exercices simples.

-   Mettez √† jour le YAML, en changeant le nom de l‚Äôauteur par le v√¥tre, et **knit** le document.
-   Committez vos modifications avec un message de commit. Assurez vous que les fichiers .Rmd et .md sont bien ajout√©s au commit.
-   Pushez  vos modifications sur GitHub.
-   Allez dans votre d√©p√¥t sur GitHub et confirmez que vos modifications sont visibles dans vos fichiers Rmd et md.

## Packages

Nous utiliserons le package **tidyverse** pour une grande partie de la manipulation des donn√©es.

```{r load-packages, message = FALSE}
library(tidyverse)
```

S'il n'est pas d√©j√† install√©, vous pouvez le faire avec la commande `install.packages("tidyverse")`. Cette commande n'est n√©caisse qu'une seule fois.

# Les laur√©ats du Prix Nobel

## Donn√©es

Le jeu de donn√©es pour cet exercice se trouve sous forme de fichier CSV (valeurs s√©par√©es par des virgules) dans le dossier data de votre d√©p√¥t. Vous pouvez les charger avec la fonction `read_csv`:

```{r load-data, message = FALSE, echo=FALSE}
nobel <- read_csv("data/nobel.csv")
```

Les descriptions des variables sont les suivantes :

-   `id`: Num√©ro d‚Äôidentification
-   `firstname`: Pr√©nom du laur√©at
-   `surname`: Nom de famille
-   `year`: Ann√©e de remise du prix
-   `category`: Cat√©gorie du prix
-   `affiliation`: Affiliation du laur√©at
-   `city`: Ville du laur√©at l‚Äôann√©e du prix
-   `country`: Pays du laur√©at l‚Äôann√©e du prix
-   `born_date`: Date de naissance du laur√©at
-   `died_date`: Date de d√©c√®s du laur√©at
-   `gender`: Sexe du laur√©at
-   `born_city`: Ville de naissance du laur√©at
-   `born_country`: Pays de naissance du laur√©at
-   `born_country_code`: Code du pays de naissance du laur√©at
-   `died_city`: Ville de d√©c√®s du laur√©at
-   `died_country`: Pays de d√©c√®s du laur√©at
-   `died_country_code`: Code du pays de d√©c√®s du laur√©at
-   `overall_motivation`: Motivation g√©n√©rale pour la reconnaissance
-   `share`: Nombre d‚Äôautres laur√©ats avec lesquels le prix est partag√©
-   `motivation`: Motivation pour la reconnaissance

Dans quelques cas, le nom de la ville/pays a chang√© apr√®s la r√©ception du prix par le laur√©at (par exemple, en 1975, la Bosnie-Herz√©govine s‚Äôappelait la R√©publique f√©d√©rative socialiste de Yougoslavie). Dans ces cas, les variables ci-dessous refl√®tent un nom diff√©rent de leurs homologues sans le suffixe \`\_original\`.

-   `born_country_original`
-   `born_city_original`
-   `died_country_original`
-   `died_city_original`
-   `city_original`
-   `country_original`

## Manipulation de donn√©es

Nous allons commencer par jeter un coup d'oeil au tableau que nous avons charg√©. Pour cela, nous pouvons utiliser la fonction `glimpse()`

```{r echo=FALSE}
glimpse(nobel)
```

Il est ainsi possible de voir pour chaque colonne, le type de donn√©es qui a √©t√© d√©tect√© lors de l'importation, et un coup d'oeils aux premi√®res valeurs. C'est le moment de rep√©rer si un type ne convient pas.

### Exploration de donn√©es
Combien d‚Äôobservations et combien de variables y a-t-il dans le jeu de donn√©es ? Que repr√©sente chaque ligne ?


### S√©lection de donn√©es

Il y a quelques observations dans ce jeu de donn√©es que nous exclurons de notre analyse pour correspondre aux r√©sultats de Buzzfeed.

Pour rappel, les diff√©rents verbes du tidyverse permettent de manipuler les donn√©es:

- `select`: S√©lectionner une colonne
- `arrange`: Ordonner les lignes
- `slice`: S√©lectionner des lignes (par les index)
- `filter`: S√©lectionner des lignes selon des crit√®res
- `distinct`: Filtrer les lignes uniques
- `mutate`: Ajout de nouvelles variables
- `summarise`: R√©duire variables en valeurs
- `group_by`: Regrouper des observations selon une variable

Countez le nombre de valeur `NA` pour la colonne. Pour cela, vous pouvez utiliser les fonctions `filter`, `is.na` et `count`.

Quelles sont les valeurs possibles pour la variable `gender` ? La valeur `org` signifie qu'une organisation a gagn√© le prix Nobel.

Nous allons maintenant vouloir s√©lectionner seulement les entr√©es qui ont toutes les valeur n√©cessaire, c'est-√†-dire des personnes vivantes dont on connait le pays d'origine.

Cr√©ez un nouveau data frame appel√© `nobel_living` qui filtre pour

- les laur√©ats pour lesquels `country` est disponible
- les laur√©ats qui sont des personnes par opposition aux organisations (les organisations sont d√©sign√©es par `org` dans la variable `gender`)
- les laur√©ats vivant, c'est-√†-dire les entr√©es dont la `died_date` est `NA`


```{r echo=FALSE}
nobel_living <- nobel %>%
  filter(
    !is.na(country),
    gender != "org",
    is.na(died_date)
  )
```

V√©rifiez que vous obtenez bien un data frame avec `r nrow(nobel_living)` observations apr√®s avoir filtr√© les donn√©es.

üß∂ ‚úÖ ‚¨ÜÔ∏è 
*Knit, commit, and push ! N'oubliez pas le message de commit.*

### Analyse et visualisation de donn√©es

#### "La plupart des laur√©ats vivants du prix Nobel √©taient bas√©s aux √âtats-Unis lorsqu‚Äôils ont remport√© leurs prix"

... dit l‚Äôarticle de Buzzfeed. Voyons si c‚Äôest vrai.

Tout d‚Äôabord, nous allons cr√©er une nouvelle variable pour identifier si le laur√©at vivait aux √âtats-Unis lorsqu‚Äôil a remport√© son prix. Pour cela, nous utiliserons la fonction `mutate()`. Cr√©ez une nouvelle colonne `country_us` qui sera √©gale √† `"USA"` si le country est √©gal √† "USA" et √† `"Other"` sinon. Pour cela, pensez √† utiliser la fonction `if_else` dans votre `mutate`.


```{r echo=FALSE}
nobel_living <- nobel_living %>%
  mutate(
    country_us = if_else(country == "USA", "USA", "Other")
  )
```

Nous voudrons ensuite transformer cette colonne en facteur, ce qui est toujours utile lorsqu'on travaille avec des donn√©es cat√©goriques. Pour cela, vous pouvez utiliser la fonction `fct_relvel()` en pr√©cisant la colonne √† mettre en facteur et le nom des niveaux (ici "USA" en premier et "Other" en deuxi√®me).

```{r echo=FALSE}
nobel_living <- nobel_living %>%
  mutate(
    country_us = fct_relevel(country_us, "USA", "Other")
  )
```


Pour la suite de l'exercice, nous limiterons notre analyse aux cat√©gories suivantes : Physique, M√©decine, Chimie et √âconomie.

Cr√©ez un nouveau data frame appel√© `nobel_living_science` qui filtre pour les cat√©gories suivantes : Physique, M√©decine, Chimie et √âconomie.

Pour cela, vous pouvez tester si `category` est dans le vecteur `c("Physics", "Medicine", "Chemistry", "Economics")`. Profitez-en √©galement pour transformer cette colonne en facteurs √©galement, en les ordonant par ordre alphab√©tique.

```{r echo=FALSE}
nobel_living_science <- nobel_living %>%
  filter(category %in% c("Physics", "Medicine", "Chemistry", "Economics")) %>%
  mutate(category = fct(category, levels =  c("Chemistry", "Economics", "Medicine", "Physics")))
```

Pour le prochain exercice, travaillez avec le data frame `nobel_living_science` que nous avons cr√©√© ci-dessus.

Cr√©ez un graphique √† barres avec des facets visualisant la relation entre la cat√©gorie du prix Nobel et si le laur√©at √©tait aux √âtats-Unis lorsqu‚Äôil l'a remport√©. 

Pour rappel, les graphiques peuvent √™tre cr√©√©s de la forme:

```{r eval=FALSE}
nobel_living_science %>%
  ggplot(aes(...)) +
    geom_XXX(...)
```

Par exemple,

```{r}
nobel_living_science %>%
  ggplot(aes(x=country_us, fill = country_us)) +
  geom_bar() +
   labs(x = "Pays de r√©sidence",                 # On met √† jour les labels
       y = "Nombre de laur√©ats",
       title = "Pays de r√©sidence des laur√©ats vivants du prix Nobel",
       subtitle = "Selon si le pays de r√©sidence correspond aux USA ou non",
       fill = "Pays du laur√©at")
```

Pour cr√©er des facettes selon les cat√©gories, vous pouvez ajouter la fonction `facet_wrap`. Votre visualisation doit avoir:

  - Votre visualisation doit √™tre facett√©e par cat√©gorie.
  - Pour chaque facette, vous devez avoir deux barres, une pour les gagnants aux √âtats-Unis et une pour les autres.
  - Inversez les coordonn√©es pour que les barres soient horizontales, pas verticales.

```{r echo=FALSE}
nobel_living_science %>%
  ggplot(aes(x=country_us, fill = country_us)) +
  geom_bar() +
   labs(x = "Pays de r√©sidence",                 # On met √† jour les labels
       y = "Nombre de laur√©ats",
       title = "Pays de r√©sidence des laur√©ats vivants du prix Nobel",
       subtitle = "Selon si le pays de r√©sidence correspond aux USA ou non",
       fill = "Pays du laur√©at") +
  facet_wrap(~ category)
```

Interpr√©tez votre visualisation et commentez le titre de Buzzfeed en regardant s'il est soutenu par les donn√©es.



üß∂ ‚úÖ ‚¨ÜÔ∏è 
*Knit, commit, and push ! N'oubliez pas le message de commit.*

#### "Mais parmi ces laur√©ats du prix Nobel bas√©s aux √âtats-Unis, beaucoup sont n√©s dans d‚Äôautres pays"

Cr√©ez une nouvelle variable appel√©e `born_country_us` qui a la valeur `"USA"` si le laur√©at est n√© aux √âtats-Unis, et `"Other"` sinon. Combien de gagnants sont n√©s aux √âtats-Unis ?

```{r echo=FALSE}
nobel_living_science_born <- nobel_living_science %>%
  mutate(
    born_country_us = if_else(born_country == "USA", "USA", "Other"),
    born_country_us = fct_relevel(born_country_us, "USA", "Other")
  )

```


Ajoutez une deuxi√®me variable √† votre visualisation de l‚Äôexercice 4 bas√©e sur si le laur√©at est n√© aux √âtats-Unis ou non. D‚Äôapr√®s votre visualisation, les donn√©es semblent-elles soutenir l‚Äôaffirmation de Buzzfeed ? Expliquez votre raisonnement en 1-2 phrases.

  - Votre visualisation finale doit contenir une facette pour chaque cat√©gorie.
  - Dans chaque facette, il doit y avoir une barre pour savoir si le laur√©at a remport√© le prix aux √âtats-Unis ou non.
  - Chaque barre doit avoir des segments pour savoir si le laur√©at est n√© aux √âtats-Unis ou non.
  
```{r echo=FALSE}
nobel_living_science_born %>%
  ggplot(aes(y=country_us, fill = born_country_us)) +
  geom_bar() +
   labs(x = "Nombre de laur√©ats",                 # On met √† jour les labels
       y = "Pays de r√©sidence du laur√©at",
       title = "D'o√π viennent les prix Nobel am√©ricains",
       subtitle = "Nombre de laur√©at selon le pays de r√©sidence et le pays d'origine.",
       fill = "Pays d'origine\n du laur√©at") +
  facet_wrap(~ category)
```


üß∂ ‚úÖ ‚¨ÜÔ∏è 
*Knit, commit, and push ! N'oubliez pas le message de commit.*

#### D'o√π viennent les laur√©ats n√©s √† l'√©tranger qui ont remport√© leur prix aux √âtats-Unis ?


Dans un seul pipeline, filtrez pour les laur√©ats qui ont remport√© leur prix aux √âtats-Unis, mais qui sont n√©s en dehors des √âtats-Unis, puis cr√©ez un tableau de fr√©quence (avec la fonction `count()`) pour leur pays de naissance (`born_country`) et arrangez le data frame r√©sultant par ordre d√©croissant du nombre d'observations pour chaque pays. Quel pays est le plus commun ?

üß∂ ‚úÖ ‚¨ÜÔ∏è 
*Knit, commit, and push ! N'oubliez pas le message de commit.*

Maintenant, relisez votre rapport pour vous assurer que vous avez r√©pondu √† toutes les questions et que tous vos blocs de code R sont correctement √©tiquet√©s.

## Int√©ress√© par la fa√ßon dont Buzzfeed a r√©alis√© leurs visualisations ?

Les graphiques dans l'article de Buzzfeed sont appel√©s des graphiques en gaufre (_waffle plots_).
Vous pouvez trouver le code utilis√© pour r√©aliser ces graphiques dans le d√©p√¥t GitHub de Buzzfeed (oui, ils en ont un !) [ici](https://buzzfeednews.github.io/2017-01-immigration-and-science/).
Vous pouvez essayer de recr√©er ces graphiques pour le plaisir, mais ce n'est pas une exigence pour ce lab.


# Religion et revenu

Nous allons analyser un jeu de donn√©es recenssant 